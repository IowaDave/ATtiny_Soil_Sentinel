# AVR Fuses and the avrdude Utility

AVR microcontrollers allow users to select and to change a number of custom configuration settings.

The settings are stored in non-volatile bytes of memory, called "fuse bytes". Non-volatile means the bytes retain their value in the chip's memory during power-off intervals.

A utility program named "avrdude" can be used to modify the configuration settings by writing carefully structured values into the fuse bytes. It also can be used to read the values of the fuse bytes.

This article describes changing one bit in one of the fuse bytes for an ATtiny2313. The change will make the chip's CPU process instructions at a speed of 8 MHz (eight million cycles per second,) rather than the default speed of 1 MHz.

<!-- the following produces a list of posts -->
{% include post_list.html %}

### The Low Fuse Byte Governs Speed
It might help to refer to Table 67 on page 160 of the [datasheet for the ATtiny2313](http://ww1.microchip.com/downloads/en/DeviceDoc/Atmel-2543-AVR-ATtiny2313_Datasheet.pdf). It explains the Low Fuse Byte as an 8-bit value where each bit means something. We're interested in five of these Bits.

First, footnote 2 under this table tells us that the default settings for Bits 3 through 0 cause an "internal RC oscillator" to run at a rate of 8 MHz. Since that is the rate we want, we go with the default settings for these four bits.

Then, look at Bit 7, named CKDIV8, described as "Divide Clock by 8." The datasheet tells us that this bit is "programmed" by default.

It means that the oscillator setting of 8 MHz will be divided by 8 to produce the final running speed of the chip, that is, 8 MHz / 8 = 1 MHz. 

We don't want this slow speed. We want 8 MHz. We need to "unprogram" the CKDIV8 bit, to make it stop dividing the oscillator by 8.

But wait. Bit 7 is "0" by default. Doesn't a "0" usually mean "off" (or "false" or "no" or "That's a big negatory, Road Dog," for all you citizens band radioheads out there?)

True. Nearly always. Except special places inside AVR chips where "0" means "yes, do the described action" and "1" means "no, do not do that action." Fuse bytes are one of those special places.

It's very helpful that the datasheet clarifies the meaning for each bit. "0" means "programmed" and "1" means "unprogrammed". 

We need to change the CKDIV8 bit to 1 from 0. The other bits can remain as they are.

All we have to do is to write a new 8-bit value to the Low Fuse Byte.  Let's calculate the new value.

By default the Low Fuse byte has the binary value of 0b01100100 = 0x64 in hexadecimal.

"Unprogramming" CKDIV8 puts a 1 at bit 7, giving a binary value of 0b11100100 = 0xE4 hex. So: that's the new value to write.

### AVRDUDE

Arduino IDE installs (and uses) a handy command-line tool for reading and writing the memory of an AVR microcontroller. Its name is "avrdude". Where can you find it? Probably in the "Arduino15" directory on your system. 

On a modern Mac, look in your user account's Library folder. On Linux I believe I remember finding that folder hidden in my Home directory as a "dot" file, that is, ".Arduino15".

I'll provide the directions I follow for using avrdude on my Mac. 
